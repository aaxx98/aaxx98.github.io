{"version":3,"file":"component---src-templates-category-page-tsx-46a4782ebe40a9d3d6e3.js","mappings":"qMAqDA,MAhCA,SAAqBA,GAAmC,IAAlC,SAAEC,GAA6BD,EACnD,MACME,GCpBOC,EAAAA,EAAAA,gBAAe,aAYhBC,ODQYC,MAExB,OACEC,EAAAA,cAAA,OAAKC,UAAU,2BACbD,EAAAA,cAAA,OAAKC,UAAU,mBACbD,EAAAA,cAAA,MAAIC,UAAU,uBACZD,EAAAA,cAACE,EAAAA,EAAe,CAACC,KAAMC,EAAAA,IAAQH,UAAU,eAAe,WAG1DD,EAAAA,cAAA,OAAKC,UAAU,eAAc,KAAGL,EAAWS,OAAO,WAEpDL,EAAAA,cAAA,OAAKC,UAAU,iBACZL,EAAWU,KAAKC,GACfP,EAAAA,cAACQ,EAAAA,KAAI,CACHC,IAAKF,EAASG,WACdC,GAAI,eAAeJ,EAASG,aAC5BT,UAAW,kBAAiBN,IAAaY,EAASG,WAAa,SAAW,KAE1EV,EAAAA,cAAA,OAAKC,UAAU,iBACZW,EAAAA,EAAcL,EAASG,aAAeH,EAASG,YAElDV,EAAAA,cAAA,OAAKC,UAAU,kBAAkBM,EAASM,WAAW,YAI3Db,EAAAA,cAAA,OAAKC,UAAU,0BAGrB,C,mGEzCe,SAASa,EAAUpB,GAA6B,IAA5B,KAAEqB,GAAuBrB,EAC1D,OAAKqB,GAAwB,IAAhBA,EAAKV,OAGhBL,EAAAA,cAAA,OAAK,aAAW,aAAaC,UAAU,cACrCD,EAAAA,cAAA,MAAIC,UAAU,mBACXc,EAAKT,KAAI,CAACU,EAAMC,KACf,MAAMC,EAASD,IAAQF,EAAKV,OAAS,EACrC,OACEL,EAAAA,cAAA,MAAIS,IAAKO,EAAKG,KAAO,GAAGH,EAAKI,QAAQH,IAAOhB,UAAU,mBACnDiB,EACClB,EAAAA,cAAA,QAAM,eAAa,OAAOC,UAAU,sBACjCe,EAAKI,MAGRpB,EAAAA,cAACQ,EAAAA,KAAI,CAACG,GAAIK,EAAKG,IAAKlB,UAAU,mBAC3Be,EAAKI,OAGRF,GACAlB,EAAAA,cAAA,QAAMC,UAAU,kBACdD,EAAAA,cAACE,EAAAA,EAAe,CAACC,KAAMkB,EAAAA,IAAcpB,UAAU,yBAGhD,MAvBwB,IA6BzC,C,oJC6DO,SAASqB,EAAIC,GAAmD,IAAlD,YAAEC,GAA8CD,EACnE,OAAOvB,EAAAA,cAACyB,EAAAA,EAAG,CAACC,MAAO,GAAGF,EAAYjB,SAASa,eAC7C,CAEA,UAnEA,SAAqB1B,GAAgE,IAA/D,KAAEiC,EAAI,YAAEH,GAAqD9B,EACjF,MAAM,SAAEa,GAAaiB,EACfI,EAAQD,EAAK7B,OAAO+B,MAE1B,OACE7B,EAAAA,cAAC8B,EAAAA,EAAM,KACL9B,EAAAA,cAAA,OAAKC,UAAU,sBACbD,EAAAA,cAAC+B,EAAAA,EAAY,CAACpC,SAAUY,EAASa,OACjCpB,EAAAA,cAAA,OAAKC,UAAU,kBACbD,EAAAA,cAAA,OAAKC,UAAU,mBACbD,EAAAA,cAACc,EAAAA,EAAU,CAACC,KAAMS,EAAYQ,eAEhChC,EAAAA,cAAA,MAAIC,UAAU,0BACZD,EAAAA,cAACE,EAAAA,EAAe,CAACC,KAAMC,EAAAA,IAAQH,UAAU,eACxCM,EAASa,KAAK,OAAKb,EAAS0B,MAAM,QAErCjC,EAAAA,cAAA,WACEA,EAAAA,cAAA,MAAIC,UAAU,aACX2B,EAAMtB,KAAI,CAAC4B,EAAWC,IACrBnC,EAAAA,cAAA,MAAIS,IAAK0B,GACPnC,EAAAA,cAACoC,EAAAA,EAAaF,UAShC,C","sources":["webpack://aaxx98-blog/./src/components/search/category-list.tsx","webpack://aaxx98-blog/./src/hooks/useCategoryData.ts","webpack://aaxx98-blog/./src/components/breadcrumb.tsx","webpack://aaxx98-blog/./src/templates/category-page.tsx"],"sourcesContent":["import React from 'react';\n\nimport { faBook } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'gatsby';\n\nimport categoryNames from '../../code/categoryName';\nimport { useCategoryData } from '../../hooks/useCategoryData';\n\ntype CategoryListProps = {\n  selected?: string;\n};\n\ntype CategoryType = {\n  totalCount: number;\n  group: {\n    fieldValue: string;\n    totalCount: number;\n  }[];\n};\n\nfunction CategoryList({ selected }: CategoryListProps) {\n  const data: CategoryType = useCategoryData();\n  const categories = data.group;\n\n  return (\n    <div className=\"category-list-container\">\n      <div className=\"tag-list-header\">\n        <h1 className=\"category-list-title\">\n          <FontAwesomeIcon icon={faBook} className=\"title-icon\" />\n          시리즈로 검색\n        </h1>\n        <div className=\"total-count\">총 {categories.length}개의 시리즈</div>\n      </div>\n      <div className=\"category-grid\">\n        {categories.map((category: any) => (\n          <Link\n            key={category.fieldValue}\n            to={`/categories/${category.fieldValue}`}\n            className={`category-card ${selected === category.fieldValue ? 'active' : ''}`}\n          >\n            <div className=\"category-name\">\n              {categoryNames[category.fieldValue] || category.fieldValue}\n            </div>\n            <div className=\"category-count\">{category.totalCount}개의 글</div>\n          </Link>\n        ))}\n      </div>\n      <div className=\"category-list-divider\" />\n    </div>\n  );\n}\n\nexport default CategoryList;\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useCategoryData = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx {\n        totalCount\n        group(field: { frontmatter: { category: SELECT } }) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `);\n\n  return data.allMdx;\n};\n","import * as React from 'react';\n\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'gatsby';\n\ntype BreadcrumbProps = {\n  info: { name: string; url: string }[];\n};\n\nexport default function Breadcrumb({ info }: BreadcrumbProps) {\n  if (!info || info.length === 0) return null;\n\n  return (\n    <nav aria-label=\"breadcrumb\" className=\"breadcrumb\">\n      <ol className=\"breadcrumb-list\">\n        {info.map((item, idx) => {\n          const isLast = idx === info.length - 1;\n          return (\n            <li key={item.url || `${item.name}-${idx}`} className=\"breadcrumb-item\">\n              {isLast ? (\n                <span aria-current=\"page\" className=\"breadcrumb-current\">\n                  {item.name}\n                </span>\n              ) : (\n                <Link to={item.url} className=\"breadcrumb-link\">\n                  {item.name}\n                </Link>\n              )}\n              {!isLast && (\n                <span className=\"breadcrumb-sep\">\n                  <FontAwesomeIcon icon={faAngleRight} className=\"breadcrumb-sep-icon\" />\n                </span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n","import React from 'react';\n\nimport { faBook } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { graphql, PageProps } from 'gatsby';\n\nimport Breadcrumb from '../components/breadcrumb';\nimport Layout from '../components/layout';\nimport PostItem from '../components/post/post-item';\nimport CategoryList from '../components/search/category-list';\nimport Seo from '../components/seo';\nimport { BreadcrumbItem } from '../types/breadcrumb';\n\ntype Post = {\n  id: string;\n  frontmatter: {\n    title: string;\n    slug: string;\n    date: string;\n  };\n  excerpt: string;\n};\n\ntype DataProps = {\n  allMdx: {\n    nodes: Post[];\n  };\n};\n\ntype PageContextProps = {\n  breadCrumbs: BreadcrumbItem[];\n  category: {\n    name: string;\n    count: number;\n  };\n  categoryName: string;\n};\n\nfunction CategoryPage({ data, pageContext }: PageProps<DataProps, PageContextProps>) {\n  const { category } = pageContext;\n  const posts = data.allMdx.nodes;\n\n  return (\n    <Layout>\n      <div className=\"tag-page-container\">\n        <CategoryList selected={category.name} />\n        <div className=\"tag-page-below\">\n          <div className=\"breadcrumb-wrap\">\n            <Breadcrumb info={pageContext.breadCrumbs} />\n          </div>\n          <h1 className=\"category-page-subtitle\">\n            <FontAwesomeIcon icon={faBook} className=\"title-icon\" />\n            {category.name} :: {category.count}건의 글\n          </h1>\n          <div>\n            <ul className=\"post-list\">\n              {posts.map((node: any, index: number) => (\n                <li key={index}>\n                  <PostItem {...node} />\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query ($categoryName: String!) {\n    allMdx(\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { category: { eq: $categoryName } } }\n    ) {\n      nodes {\n        id\n        frontmatter {\n          title\n          slug\n          date(formatString: \"YYYY년 M월 D일\")\n          tags\n          category\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData(\n                layout: CONSTRAINED\n                width: 800\n                height: 600\n                placeholder: BLURRED\n                transformOptions: { fit: COVER, cropFocus: CENTER }\n              )\n            }\n          }\n        }\n        excerpt\n      }\n    }\n  }\n`;\n\nexport function Head({ pageContext }: PageProps<{}, PageContextProps>) {\n  return <Seo title={`${pageContext.category.name} 시리즈의 글`} />;\n}\n\nexport default CategoryPage;\n"],"names":["_ref","selected","categories","useStaticQuery","allMdx","group","React","className","FontAwesomeIcon","icon","faBook","length","map","category","Link","key","fieldValue","to","categoryNames","totalCount","Breadcrumb","info","item","idx","isLast","url","name","faAngleRight","Head","_ref2","pageContext","Seo","title","data","posts","nodes","Layout","CategoryList","breadCrumbs","count","node","index","PostItem"],"sourceRoot":""}